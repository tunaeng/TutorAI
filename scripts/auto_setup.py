#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê AI TUTOR
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""
import subprocess
import time
import asyncio
import sys
import os
from pathlib import Path
from datetime import date, datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import engine, Base, async_session
from app.models import education  # –í–∞–∂–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
from app.models.education import (
    CourseProgram, Student, Stream, Module, Lesson,
    CourseMaterial, Schedule, Assignment, Message, BotResponse,
    Meeting, Prompt, FAQResponse
)

def run_command(command, shell=True, timeout=300):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å, stdout, stderr"""
    try:
        result = subprocess.run(command, shell=shell, capture_output=True, text=True, timeout=timeout)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫—É–Ω–¥: {command}")
        return False, "", "Timeout"
    except Exception as e:
        return False, "", str(e)

async def create_tables():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!')
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

async def seed_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üå± –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    try:
        async with async_session() as session:
            # –ü—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–æ–≤
            programs_data = [
                {
                    "name": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –ò–ò –≤ —Å—Ñ–µ—Ä–µ –∫—É–ª—å—Ç—É—Ä—ã",
                    "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –ò–ò",
                    "total_hours": 144
                }
            ]
            
            programs = []
            for program_data in programs_data:
                program = CourseProgram(**program_data)
                session.add(program)
                programs.append(program)
            
            await session.flush()
            
            # –ú–æ–¥—É–ª–∏
            modules_data = [
                {"name": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò", "order_num": 1, "duration_hours": 15},
                {"name": "–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏", "order_num": 2, "duration_hours": 44},
                {"name": "–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "order_num": 3, "duration_hours": 11},
                {"name": "–ò–ò –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö", "order_num": 4, "duration_hours": 11},
                {"name": "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", "order_num": 5, "duration_hours": 11}
            ]
            
            modules = []
            for module_data in modules_data:
                module = Module(
                    program_id=programs[0].program_id,
                    **module_data
                )
                session.add(module)
                modules.append(module)
            
            await session.flush()
            
            # –°—Ç—É–¥–µ–Ω—Ç—ã
            students_data = [
                {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "phone": "+79123456789", "telegram_user_id": 123456789, "telegram_username": "ivan_petrov"},
                {"name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "phone": "+79123456790", "telegram_user_id": 123456790, "telegram_username": "maria_sidorova"},
                {"name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "phone": "+79123456791", "telegram_user_id": 123456791, "telegram_username": "alex_kozlov"},
                {"name": "–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "phone": "+79123456792", "telegram_user_id": 123456792, "telegram_username": "elena_volkova"},
                {"name": "–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤", "phone": "+79123456793", "telegram_user_id": 123456793, "telegram_username": "dmitry_novikov"}
            ]
            
            students = []
            for student_data in students_data:
                student = Student(
                    course_program_id=programs[0].program_id,
                    **student_data
                )
                session.add(student)
                students.append(student)
            
            await session.flush()
            
            # –ü–æ—Ç–æ–∫–∏
            streams_data = [
                {"name": "–û–∫—Ç—è–±—Ä—å 2025", "start_date": date(2025, 10, 1), "end_date": date(2025, 12, 31)},
                {"name": "–Ø–Ω–≤–∞—Ä—å 2026", "start_date": date(2026, 1, 15), "end_date": date(2026, 3, 31)}
            ]
            
            streams = []
            for stream_data in streams_data:
                stream = Stream(
                    program_id=programs[0].program_id,
                    **stream_data
                )
                session.add(stream)
                streams.append(stream)
            
            await session.flush()
            
            # –£—Ä–æ–∫–∏
            lessons_data = [
                {"name": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò", "order_num": 1, "duration_hours": 2},
                {"name": "–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", "order_num": 2, "duration_hours": 3},
                {"name": "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "order_num": 3, "duration_hours": 4},
                {"name": "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "order_num": 4, "duration_hours": 5},
                {"name": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "order_num": 5, "duration_hours": 3}
            ]
            
            lessons = []
            for lesson_data in lessons_data:
                lesson = Lesson(
                    module_id=modules[0].module_id,
                    **lesson_data
                )
                session.add(lesson)
                lessons.append(lesson)
            
            await session.flush()
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
            materials_data = [
                {"title": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò", "material_type": "presentation", "material_category": "lecture"},
                {"title": "–í–∏–¥–µ–æ: –û—Å–Ω–æ–≤—ã ML", "material_type": "video", "material_category": "lecture"},
                {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "material_type": "assignment", "material_category": "practice"},
                {"title": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "material_type": "document", "material_category": "reference"}
            ]
            
            materials = []
            for material_data in materials_data:
                material = CourseMaterial(
                    lesson_id=lessons[0].lesson_id,
                    **material_data
                )
                session.add(material)
                materials.append(material)
            
            await session.flush()
            
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedules_data = [
                {"scheduled_date": datetime(2025, 10, 15, 10, 0), "is_completed": False},
                {"scheduled_date": datetime(2025, 10, 17, 14, 0), "is_completed": True},
                {"scheduled_date": datetime(2025, 10, 20, 16, 0), "is_completed": False}
            ]
            
            schedules = []
            for schedule_data in schedules_data:
                schedule = Schedule(
                    lesson_id=lessons[0].lesson_id,
                    **schedule_data
                )
                session.add(schedule)
                schedules.append(schedule)
            
            await session.flush()
            
            # –ó–∞–¥–∞–Ω–∏—è
            assignments_data = [
                {"name": "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 1", "description": "–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ò–ò", "status": "completed", "deadline": datetime(2025, 10, 25, 23, 59), "grade": 85},
                {"name": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞", "description": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å", "status": "in_progress", "deadline": datetime(2025, 11, 5, 23, 59), "grade": None},
                {"name": "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ò–ò-—Ä–µ—à–µ–Ω–∏–µ", "status": "pending", "deadline": datetime(2025, 12, 15, 23, 59), "grade": None}
            ]
            
            assignments = []
            for i, assignment_data in enumerate(assignments_data):
                assignment = Assignment(
                    student_id=students[i % len(students)].student_id,
                    lesson_id=lessons[i % len(lessons)].lesson_id,
                    **assignment_data,
                    submitted_at=datetime(2025, 11, 10, 15, 30, 0) if assignment_data["status"] == "completed" else None,
                    checked_at=datetime(2025, 11, 26, 10, 0, 0) if assignment_data["status"] == "completed" else None
                )
                session.add(assignment)
                assignments.append(assignment)
            
            await session.flush()
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            messages_data = [
                {"sender_type": "student", "sender_id": students[0].student_id, "text_content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é."},
                {"sender_type": "student", "sender_id": students[1].student_id, "text_content": "–ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π?"},
                {"sender_type": "student", "sender_id": students[2].student_id, "text_content": "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ?"}
            ]
            
            messages = []
            for message_data in messages_data:
                message = Message(**message_data)
                session.add(message)
                messages.append(message)
            
            await session.flush()
            
            # –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
            bot_responses_data = [
                {"message_id": messages[0].message_id, "text_content": "–ö–æ–Ω–µ—á–Ω–æ! –ü–æ –∫–∞–∫–æ–º—É –∏–º–µ–Ω–Ω–æ –∑–∞–¥–∞–Ω–∏—é —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?"},
                {"message_id": messages[1].message_id, "text_content": "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏."},
                {"message_id": messages[2].message_id, "text_content": "–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è 20 –æ–∫—Ç—è–±—Ä—è –≤ 16:00."}
            ]
            
            for bot_response_data in bot_responses_data:
                bot_response = BotResponse(**bot_response_data)
                session.add(bot_response)
            
            await session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
            print(f"  - –ü—Ä–æ–≥—Ä–∞–º–º –∫—É—Ä—Å–æ–≤: {len(programs)}")
            print(f"  - –ú–æ–¥—É–ª–µ–π: {len(modules)}")
            print(f"  - –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")
            print(f"  - –ü–æ—Ç–æ–∫–æ–≤: {len(streams)}")
            print(f"  - –£—Ä–æ–∫–æ–≤: {len(lessons)}")
            print(f"  - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials)}")
            print(f"  - –†–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(schedules)}")
            print(f"  - –ó–∞–¥–∞–Ω–∏–π: {len(assignments)}")
            print(f"  - –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            print(f"  - –û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: {len(bot_responses_data)}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê AI TUTOR")
    print("=" * 50)
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å
    print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
    run_command("docker-compose down --volumes")
    run_command("docker system prune -f")
    
    # 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —á–µ—Ä–µ–∑ docker-compose
    print("üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
    success, stdout, error = run_command("docker-compose up -d", timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {error}")
        return False
    
    # 3. –ñ–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    time.sleep(30)
    print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    
    # 4. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Docker
    print("üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Docker...")
    success, output, error = run_command("docker exec ai_tutor_app python scripts/create_tables.py", timeout=60)
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {error}")
        return False
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
    
    # 5. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Docker
    print("üå± –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Docker...")
    success, output, error = run_command("docker exec ai_tutor_app python scripts/seed_data.py", timeout=120)
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error}")
        return False
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
    print("\n" + "=" * 50)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
    print("  - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8000/admin")
    print("  - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("  - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:8000 (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–¥–º–∏–Ω–∫—É)")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
