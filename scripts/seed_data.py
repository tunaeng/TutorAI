#!/usr/bin/env python3
"""
Realistic test data seeding script for AI Tutor Backend
Creates comprehensive test data for AI culture specialist course
"""

import asyncio
import random
from datetime import datetime, date, time, timedelta
from typing import List
import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session_factory
from app.models.education import (
    CourseProgram, Module, Lesson, CourseMaterial, Stream, Student, 
    Schedule, Message, BotResponse, Assignment,
    Prompt, FAQResponse, MaterialCategory, SenderType, AssignmentStatus, 
    MeetingType, PromptType
)
from app.models.education import students_streams


class DataSeeder:
    """Realistic test data seeder for AI culture specialist course"""
    
    def __init__(self):
        self.session_factory = get_session_factory()
        
    async def seed_all_data(self):
        """Seed all test data"""
        print("üå± Seeding realistic test data for AI Culture Specialist course...")
        
        async with self.session_factory() as session:
            try:
                # 1. Course Programs
                await self._seed_course_programs(session)
                
                # 2. Modules
                await self._seed_modules(session)
                
                # 3. Lessons
                await self._seed_lessons(session)
                
                # 4. Course Materials
                await self._seed_course_materials(session)
                
                # 5. Streams
                await self._seed_streams(session)
                
                # 6. Students
                await self._seed_students(session)
                
                # 7. Students-Streams associations
                await self._seed_students_streams(session)
                
                # 8. Schedule
                await self._seed_schedule(session)
                
                # 9. Messages and Bot Responses
                await self._seed_messages_and_responses(session)
                
                # 10. Assignments
                await self._seed_assignments(session)
                
                # 11. Prompts
                await self._seed_prompts(session)
                
                # 12. FAQ Responses
                await self._seed_faq_responses(session)
                
                await session.commit()
                print("‚úÖ All test data seeded successfully!")
                
            except Exception as e:
                await session.rollback()
                print(f"‚ùå Error seeding data: {e}")
                raise
    
    async def _seed_course_programs(self, session):
        """Seed course programs"""
        print("üìö Creating course programs...")
        
        program = CourseProgram(
            name="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –ò–ò –≤ —Å—Ñ–µ—Ä–µ –∫—É–ª—å—Ç—É—Ä—ã",
            description="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö, –º—É–∑–µ—è—Ö, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö",
            total_hours=144
        )
        session.add(program)
        await session.flush()
        self.program_id = program.program_id
        print(f"  ‚úÖ Created program: {program.name}")
    
    async def _seed_modules(self, session):
        """Seed modules"""
        print("üìñ Creating modules...")
        
        modules_data = [
            {
                "order_num": 1,
                "name": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò",
                "description": "–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∫—É–ª—å—Ç—É—Ä–µ",
                "duration_hours": 15,
                "lecture_hours": 8,
                "practice_hours": 5,
                "independent_hours": 2,
                "is_intermediate_attestation": False,
                "is_final_attestation": False
            },
            {
                "order_num": 2,
                "name": "–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏",
                "description": "–ò–∑—É—á–µ–Ω–∏–µ GPT, Claude, LLaMA –∏ –¥—Ä—É–≥–∏—Ö LLM, –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π —Å—Ñ–µ—Ä–µ",
                "duration_hours": 44,
                "lecture_hours": 20,
                "practice_hours": 20,
                "independent_hours": 4,
                "is_intermediate_attestation": True,
                "is_final_attestation": False
            },
            {
                "order_num": 3,
                "name": "–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
                "description": "DALL-E, Midjourney, Stable Diffusion –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫—É–ª—å—Ç—É—Ä–µ",
                "duration_hours": 11,
                "lecture_hours": 6,
                "practice_hours": 4,
                "independent_hours": 1,
                "is_intermediate_attestation": False,
                "is_final_attestation": False
            },
            {
                "order_num": 4,
                "name": "–ò–ò –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö",
                "description": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞—Å–ª–µ–¥–∏—è, –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                "duration_hours": 11,
                "lecture_hours": 6,
                "practice_hours": 4,
                "independent_hours": 1,
                "is_intermediate_attestation": False,
                "is_final_attestation": False
            },
            {
                "order_num": 5,
                "name": "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–∏–¥–æ–≤ –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π",
                "duration_hours": 11,
                "lecture_hours": 6,
                "practice_hours": 4,
                "independent_hours": 1,
                "is_intermediate_attestation": False,
                "is_final_attestation": True
            }
        ]
        
        self.modules = []
        for module_data in modules_data:
            module = Module(
                program_id=self.program_id,
                **module_data
            )
            session.add(module)
            self.modules.append(module)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(modules_data)} modules")
    
    async def _seed_lessons(self, session):
        """Seed lessons (4 per module)"""
        print("üìù Creating lessons...")
        
        lessons_data = [
            # Module 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò
            {"module_idx": 0, "order": 1, "name": "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò", "description": "–û—Ç –¢—å—é—Ä–∏–Ω–≥–∞ –¥–æ ChatGPT: —ç–≤–æ–ª—é—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", "duration": 2},
            {"module_idx": 0, "order": 2, "name": "–¢–∏–ø—ã –ò–ò –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "description": "–°–ª–∞–±—ã–π –∏ —Å–∏–ª—å–Ω—ã–π –ò–ò, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "duration": 2},
            {"module_idx": 0, "order": 3, "name": "–ò–ò –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ", "description": "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –≤ –º—É–∑–µ—è—Ö, —Ç–µ–∞—Ç—Ä–∞—Ö, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö", "duration": 2},
            {"module_idx": 0, "order": 4, "name": "–≠—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ò–ò", "description": "–ü—Ä–æ–±–ª–µ–º—ã bias, –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", "duration": 2},
            
            # Module 2: –ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
            {"module_idx": 1, "order": 1, "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ LLM", "description": "Transformer, attention mechanism, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π", "duration": 3},
            {"module_idx": 1, "order": 2, "name": "GPT –∏ –µ–≥–æ –≤–µ—Ä—Å–∏–∏", "description": "–û—Ç GPT-1 –¥–æ GPT-4, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "duration": 3},
            {"module_idx": 1, "order": 3, "name": "Prompt Engineering", "description": "–ò—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "duration": 3},
            {"module_idx": 1, "order": 4, "name": "LLM –≤ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–µ—Ä–µ–≤–æ–¥—ã, –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤", "duration": 3},
            
            # Module 3: –î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            {"module_idx": 2, "order": 1, "name": "–ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏—Ñ—Ñ—É–∑–∏–∏", "description": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "duration": 2},
            {"module_idx": 2, "order": 2, "name": "DALL-E –∏ Midjourney", "description": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "duration": 2},
            {"module_idx": 2, "order": 3, "name": "Stable Diffusion", "description": "Open-source —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "duration": 2},
            {"module_idx": 2, "order": 4, "name": "–ò–ò-–∞—Ä—Ç –≤ –º—É–∑–µ—è—Ö", "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è—Ö", "duration": 2},
            
            # Module 4: –ò–ò –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö
            {"module_idx": 3, "order": 1, "name": "–û—Ü–∏—Ñ—Ä–æ–≤–∫–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è", "description": "–ò–ò –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", "duration": 2},
            {"module_idx": 3, "order": 2, "name": "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "description": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –¥–∞—Ç–∏—Ä–æ–≤–∫–∞, –∞—Ç—Ä–∏–±—É—Ü–∏—è", "duration": 2},
            {"module_idx": 3, "order": 3, "name": "–ò–ò –≤ –∞—Ä—Ö–µ–æ–ª–æ–≥–∏–∏", "description": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ö–æ–¥–æ–∫, —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤", "duration": 2},
            {"module_idx": 3, "order": 4, "name": "–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞—Ä—Ö–∏–≤—ã", "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –≤ –∞—Ä—Ö–∏–≤–∞—Ö", "duration": 2},
            
            # Module 5: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
            {"module_idx": 4, "order": 1, "name": "–ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –º—É–∑–µ–µ–≤", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –≥–∏–¥–æ–≤ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤", "duration": 2},
            {"module_idx": 4, "order": 2, "name": "–ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏", "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Alexa, Google Assistant –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π", "duration": 2},
            {"module_idx": 4, "order": 3, "name": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏", "description": "–ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –º—É–∑–µ–π–Ω—ã—Ö —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤", "duration": 2},
            {"module_idx": 4, "order": 4, "name": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "description": "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π", "duration": 2}
        ]
        
        self.lessons = []
        for lesson_data in lessons_data:
            lesson = Lesson(
                module_id=self.modules[lesson_data["module_idx"]].module_id,
                order_num=lesson_data["order"],
                name=lesson_data["name"],
                description=lesson_data["description"],
                duration_hours=lesson_data["duration"]
            )
            session.add(lesson)
            self.lessons.append(lesson)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(lessons_data)} lessons")
    
    async def _seed_course_materials(self, session):
        """Seed course materials (3 per lesson)"""
        print("üìÑ Creating course materials...")
        
        material_types = ["PDF", "VIDEO", "PYTHON", "HTML", "JSON", "TXT"]
        
        for lesson in self.lessons:
            # Lecture material
            lecture = CourseMaterial(
                lesson_id=lesson.lesson_id,
                title=f"–õ–µ–∫—Ü–∏—è: {lesson.name}",
                content=f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –ª–µ–∫—Ü–∏—è –ø–æ —Ç–µ–º–µ '{lesson.name}'. {lesson.description}",
                file_path=f"/materials/lectures/lesson_{lesson.lesson_id}_lecture.pdf",
                material_type="PDF",
                material_category=MaterialCategory.LECTURE,
                is_public=True
            )
            session.add(lecture)
            
            # Assignment
            assignment = CourseMaterial(
                lesson_id=lesson.lesson_id,
                title=f"–ó–∞–¥–∞–Ω–∏–µ: {lesson.name}",
                content=f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{lesson.name}'. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏...",
                file_path=f"/materials/assignments/lesson_{lesson.lesson_id}_assignment.py",
                material_type="PYTHON",
                material_category=MaterialCategory.ASSIGNMENT,
                is_public=False
            )
            session.add(assignment)
            
            # Methodical material
            methodical = CourseMaterial(
                lesson_id=lesson.lesson_id,
                title=f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {lesson.name}",
                content=f"–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–º—ã '{lesson.name}'",
                file_path=f"/materials/methodical/lesson_{lesson.lesson_id}_guide.pdf",
                material_type="PDF",
                material_category=MaterialCategory.METHODICAL,
                is_public=True
            )
            session.add(methodical)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(self.lessons) * 3} course materials")
    
    async def _seed_streams(self, session):
        """Seed streams"""
        print("üìÖ Creating streams...")
        
        streams_data = [
            {
                "name": "–û–∫—Ç—è–±—Ä—å 2025",
                "start_date": date(2025, 10, 1),
                "end_date": date(2025, 12, 31),
                "description": "–û—Å–µ–Ω–Ω–∏–π –ø–æ—Ç–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ"
            },
            {
                "name": "–ù–æ—è–±—Ä—å 2025", 
                "start_date": date(2025, 11, 1),
                "end_date": date(2026, 1, 31),
                "description": "–ó–∏–º–Ω–∏–π –ø–æ—Ç–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ"
            }
        ]
        
        self.streams = []
        for stream_data in streams_data:
            stream = Stream(
                program_id=self.program_id,
                **stream_data
            )
            session.add(stream)
            self.streams.append(stream)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(streams_data)} streams")
    
    async def _seed_students(self, session):
        """Seed students with realistic data"""
        print("üë• Creating students...")
        
        students_data = [
            {"name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", "phone": "+79991234567", "telegram_user_id": 100001, "telegram_username": "anna_smirnova"},
            {"name": "–î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö–æ–∑–ª–æ–≤", "phone": "+79991234568", "telegram_user_id": 100002, "telegram_username": "dmitry_kozlov"},
            {"name": "–ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞", "phone": "+79991234569", "telegram_user_id": 100003, "telegram_username": "elena_morozova"},
            {"name": "–ò–≥–æ—Ä—å –°–µ—Ä–≥–µ–µ–≤–∏—á –í–æ–ª–∫–æ–≤", "phone": "+79991234570", "telegram_user_id": 100004, "telegram_username": "igor_volkov"},
            {"name": "–ú–∞—Ä–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞", "phone": "+79991234571", "telegram_user_id": 100005, "telegram_username": "maria_lebedeva"},
            {"name": "–ê–ª–µ–∫—Å–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á –°–æ–∫–æ–ª–æ–≤", "phone": "+79991234572", "telegram_user_id": 100006, "telegram_username": "alexey_sokolov"},
            {"name": "–û–ª—å–≥–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞ –ü–æ–ø–æ–≤–∞", "phone": "+79991234573", "telegram_user_id": 100007, "telegram_username": "olga_popova"},
            {"name": "–°–µ—Ä–≥–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á –ù–æ–≤–∏–∫–æ–≤", "phone": "+79991234574", "telegram_user_id": 100008, "telegram_username": "sergey_novikov"},
            {"name": "–¢–∞—Ç—å—è–Ω–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–∞", "phone": "+79991234575", "telegram_user_id": 100009, "telegram_username": "tatyana_fedorova"},
            {"name": "–í–ª–∞–¥–∏–º–∏—Ä –ü–µ—Ç—Ä–æ–≤–∏—á –ú–æ—Ä–æ–∑–æ–≤", "phone": "+79991234576", "telegram_user_id": 100010, "telegram_username": "vladimir_morozov"},
            {"name": "–ù–∞—Ç–∞–ª—å—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "phone": "+79991234577", "telegram_user_id": 100011, "telegram_username": "natalya_volkova"},
            {"name": "–ê–Ω–¥—Ä–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –ê–ª–µ–∫—Å–µ–µ–≤", "phone": "+79991234578", "telegram_user_id": 100012, "telegram_username": "andrey_alekseev"},
            {"name": "–ò—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞ –°—Ç–µ–ø–∞–Ω–æ–≤–∞", "phone": "+79991234579", "telegram_user_id": 100013, "telegram_username": "irina_stepanova"},
            {"name": "–ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ü–∞–≤–ª–æ–≤", "phone": "+79991234580", "telegram_user_id": 100014, "telegram_username": "mikhail_pavlov"},
            {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞ –°–µ–º–µ–Ω–æ–≤–∞", "phone": "+79991234581", "telegram_user_id": 100015, "telegram_username": "ekaterina_semenova"}
        ]
        
        self.students = []
        for student_data in students_data:
            student = Student(
                name=student_data["name"],
                phone=student_data["phone"],
                telegram_user_id=student_data["telegram_user_id"],
                telegram_username=student_data["telegram_username"],
                course_program_id=self.program_id,
                is_active=True
            )
            session.add(student)
            self.students.append(student)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(students_data)} students")
    
    async def _seed_students_streams(self, session):
        """Seed students-streams associations"""
        print("üîó Creating student-stream associations...")
        
        # Distribute students between streams (8 in first, 7 in second)
        for i, student in enumerate(self.students):
            stream_id = self.streams[0].stream_id if i < 8 else self.streams[1].stream_id
            enrolled_at = datetime.now() - timedelta(days=random.randint(1, 30))
            
            association = students_streams.insert().values(
                student_id=student.student_id,
                stream_id=stream_id,
                enrolled_at=enrolled_at
            )
            await session.execute(association)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(self.students)} student-stream associations")
    
    async def _seed_schedule(self, session):
        """Seed schedule for 30 days"""
        print("üìã Creating schedule...")
        
        start_date = date(2025, 10, 1)
        meeting_types = [MeetingType.LECTURE, MeetingType.PRACTICE, MeetingType.INDEPENDENT]
        
        schedule_count = 0
        for day in range(30):
            current_date = start_date + timedelta(days=day)
            
            # Skip weekends
            if current_date.weekday() >= 5:
                continue
            
            # 1-2 lessons per day
            lessons_per_day = random.randint(1, 2)
            selected_lessons = random.sample(self.lessons, min(lessons_per_day, len(self.lessons)))
            
            for lesson in selected_lessons:
                for stream in self.streams:
                    meeting_type = random.choice(meeting_types)
                    
                    schedule_item = Schedule(
                        stream_id=stream.stream_id,
                        lesson_id=lesson.lesson_id,
                        scheduled_date=current_date,
                        is_completed=random.choice([True, False])
                    )
                    session.add(schedule_item)
                    schedule_count += 1
        
        await session.flush()
        print(f"  ‚úÖ Created {schedule_count} schedule items")
    
    async def _seed_messages_and_responses(self, session):
        """Seed realistic messages and bot responses"""
        print("üí¨ Creating messages and bot responses...")
        
        ai_topics = [
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ChatGPT?",
            "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑–µ–π–Ω—ã—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏–π?",
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ prompt engineering?",
            "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –≤ –æ—Ü–∏—Ñ—Ä–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?",
            "–≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ",
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ DALL-E –∏ Midjourney",
            "–ö–∞–∫ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö?",
            "–ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–∞"
        ]
        
        bot_responses = [
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ChatGPT –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Transformer...",
            "–î–∞, –ò–ò –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º—É–∑–µ—è—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏–π...",
            "–û—Å–Ω–æ–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç bias –≤ –¥–∞–Ω–Ω—ã—Ö, –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...",
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ —Å–±–æ—Ä–∞ FAQ...",
            "Prompt engineering - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò...",
            "–ò–ò –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...",
            "–í–∞–∂–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∫–ª—é—á–∞—é—Ç –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å...",
            "DALL-E –ª—É—á—à–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º, Midjourney - –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤...",
            "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ bias –∏ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏...",
            "–ò–ò –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –∏ –¥–∞–∂–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ..."
        ]
        
        message_count = 0
        response_count = 0
        messages_to_respond = []
        
        for student in self.students:
            # 3-5 messages per student
            num_messages = random.randint(3, 5)
            
            for i in range(num_messages):
                topic = random.choice(ai_topics)
                message = Message(
                    telegram_message_id=1000000 + message_count,
                    chat_id=student.telegram_user_id,
                    sender_type=SenderType.USER,
                    sender_id=student.student_id,
                    text_content=topic,
                    created_at=datetime.now() - timedelta(days=random.randint(1, 20))
                )
                session.add(message)
                message_count += 1
                
                # Store message for bot response (80% chance)
                if random.random() < 0.8:
                    messages_to_respond.append((message, random.choice(bot_responses)))
        
        # Flush messages first to get their IDs
        await session.flush()
        
        # Now create bot responses with proper message IDs
        for message, response_text in messages_to_respond:
            bot_response = BotResponse(
                message_id=message.message_id,
                text_content=response_text,
                created_at=message.created_at + timedelta(minutes=random.randint(1, 10))
            )
            session.add(bot_response)
            response_count += 1
        
        await session.flush()
        print(f"  ‚úÖ Created {message_count} messages and {response_count} bot responses")
    
    async def _seed_assignments(self, session):
        """Seed assignments with different statuses"""
        print("üìù Creating assignments...")
        
        assignment_templates = [
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ò–ò-–≥–∏–¥–∞ –¥–ª—è –º—É–∑–µ—è",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ",
            "–°–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
            "–°—Ä–∞–≤–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö LLM –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∑–∞–¥–∞—á",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ò–ò",
            "–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ bias –≤ –ò–ò-–º–æ–¥–µ–ª—è—Ö –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        ]
        
        assignment_count = 0
        
        for student in self.students:
            # 2-4 assignments per student
            num_assignments = random.randint(2, 4)
            selected_lessons = random.sample(self.lessons, min(num_assignments, len(self.lessons)))
            
            for lesson in selected_lessons:
                template = random.choice(assignment_templates)
                status = random.choice([AssignmentStatus.PENDING, AssignmentStatus.SUBMITTED, AssignmentStatus.CHECKED])
                
                assignment = Assignment(
                    student_id=student.student_id,
                    lesson_id=lesson.lesson_id,
                    name=f"–ó–∞–¥–∞–Ω–∏–µ: {lesson.name}",
                    description=f"{template}. –£—Ä–æ–∫: {lesson.name}",
                    status=status,
                    deadline=date.today() + timedelta(days=random.randint(1, 14)),
                    created_at=datetime.now() - timedelta(days=random.randint(1, 10))
                )
                
                if status in [AssignmentStatus.SUBMITTED, AssignmentStatus.CHECKED]:
                    assignment.submitted_at = assignment.created_at + timedelta(days=random.randint(1, 5))
                
                if status == AssignmentStatus.CHECKED:
                    assignment.checked_at = assignment.submitted_at + timedelta(days=random.randint(1, 3))
                    assignment.feedback = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –•–æ—Ä–æ—à–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–¥–∞–Ω–∏—è."
                    assignment.grade = random.randint(4, 5)
                
                session.add(assignment)
                assignment_count += 1
        
        await session.flush()
        print(f"  ‚úÖ Created {assignment_count} assignments")
    
    async def _seed_prompts(self, session):
        """Seed AI prompts"""
        print("ü§ñ Creating AI prompts...")
        
        prompts_data = [
            {
                "prompt_type": PromptType.QUESTION_CLASSIFIER,
                "prompt_text": "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_–≤–æ–ø—Ä–æ—Å—ã, —ç—Ç–∏—á–µ—Å–∫–∏–µ_–ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ, –∏—Å—Ç–æ—Ä–∏—è_—Ä–∞–∑–≤–∏—Ç–∏—è, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–º–æ–¥–µ–ª–µ–π. –í–æ–ø—Ä–æ—Å: {question}",
                "description": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π —Å—Ñ–µ—Ä–µ"
            },
            {
                "prompt_type": PromptType.FAQ_RESPONSE,
                "prompt_text": "–û—Ç–≤–µ—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å –æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ: {question}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —á–µ—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
                "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ FAQ –ø–æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ"
            },
            {
                "prompt_type": PromptType.MATERIAL_RESPONSE,
                "prompt_text": "–ù–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —Ç–µ–º–µ '{topic}' –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞. –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_content}",
                "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            }
        ]
        
        for prompt_data in prompts_data:
            prompt = Prompt(**prompt_data)
            session.add(prompt)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(prompts_data)} AI prompts")
    
    async def _seed_faq_responses(self, session):
        """Seed FAQ responses"""
        print("‚ùì Creating FAQ responses...")
        
        faq_data = [
            {
                "category": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_–≤–æ–ø—Ä–æ—Å—ã",
                "keywords": "ChatGPT, GPT, —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ChatGPT?",
                "answer_text": "ChatGPT –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Transformer –∏ –æ–±—É—á–µ–Ω –Ω–∞ –æ–≥—Ä–æ–º–Ω–æ–º –æ–±—ä–µ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
            },
            {
                "category": "—ç—Ç–∏—á–µ—Å–∫–∏–µ_–ø—Ä–æ–±–ª–µ–º—ã",
                "keywords": "—ç—Ç–∏–∫–∞, –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ, bias, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
                "question": "–ö–∞–∫–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω—ã —Å –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ?",
                "answer_text": "–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç: bias –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö, –≤–æ–ø—Ä–æ—Å—ã –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."
            },
            {
                "category": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                "keywords": "–º—É–∑–µ–π, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∞, —á–∞—Ç-–±–æ—Ç",
                "question": "–ö–∞–∫ –ò–ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º—É–∑–µ—è—Ö?",
                "answer_text": "–ò–ò –≤ –º—É–∑–µ—è—Ö –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è: —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –≥–∏–¥–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            },
            {
                "category": "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–º–æ–¥–µ–ª–µ–π",
                "keywords": "DALL-E, Midjourney, Stable Diffusion, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                "question": "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É DALL-E –∏ Midjourney?",
                "answer_text": "DALL-E –ª—É—á—à–µ —Å–ª–µ–¥—É–µ—Ç —Ç–æ—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ —Å–æ–∑–¥–∞–µ—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, Midjourney —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–∞—Ö. DALL-E –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å ChatGPT, Midjourney –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è."
            },
            {
                "category": "–∏—Å—Ç–æ—Ä–∏—è_—Ä–∞–∑–≤–∏—Ç–∏—è",
                "keywords": "–∏—Å—Ç–æ—Ä–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ, –¢—å—é—Ä–∏–Ω–≥, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "question": "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–ª—Å—è –ò–ò?",
                "answer_text": "–ò—Å—Ç–æ—Ä–∏—è –ò–ò –Ω–∞—á–∞–ª–∞—Å—å —Å —Ä–∞–±–æ—Ç –ê–ª–∞–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞ –≤ 1950-—Ö. –ö–ª—é—á–µ–≤—ã–µ —ç—Ç–∞–ø—ã: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Ä–∞–∑–≤–∏—Ç–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Ä–∞ –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π."
            }
        ]
        
        for faq_item in faq_data:
            faq = FAQResponse(**faq_item)
            session.add(faq)
        
        await session.flush()
        print(f"  ‚úÖ Created {len(faq_data)} FAQ responses")


async def main():
    """Main function"""
    print("üöÄ AI Tutor Backend - Realistic Test Data Seeder")
    print("=" * 60)
    
    seeder = DataSeeder()
    await seeder.seed_all_data()
    
    print("\n" + "=" * 60)
    print("üéâ Realistic test data seeding completed!")
    print("\nüìä Created data:")
    print("  ‚Ä¢ 1 Course Program (AI Culture Specialist)")
    print("  ‚Ä¢ 5 Modules (144 hours total)")
    print("  ‚Ä¢ 20 Lessons (4 per module)")
    print("  ‚Ä¢ 60 Course Materials (3 per lesson)")
    print("  ‚Ä¢ 2 Streams (October & November 2025)")
    print("  ‚Ä¢ 15 Students with realistic data")
    print("  ‚Ä¢ 15 Student-Stream associations")
    print("  ‚Ä¢ 30-day schedule with meetings")
    print("  ‚Ä¢ 50+ Messages and Bot responses")
    print("  ‚Ä¢ 30+ Assignments with various statuses")
    print("  ‚Ä¢ 3 AI Prompts")
    print("  ‚Ä¢ 5 FAQ Responses")


if __name__ == "__main__":
    asyncio.run(main())
