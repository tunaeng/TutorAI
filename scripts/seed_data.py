#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
"""
import asyncio
import sys
import os
from datetime import date, time, datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def seed_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.core.database import async_session, engine
        from app.models.education import (
            CourseProgram, Student, Stream, Module, Lesson,
            CourseMaterial, Schedule, Assignment, Message, BotResponse,
            Meeting, Prompt, FAQResponse
        )
        from sqlalchemy.ext.asyncio import AsyncSession
        import random
        
        print("üå± –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        async with async_session() as session:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–æ–≤
            programs_data = [
                {
                    "name": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –ò–ò –≤ —Å—Ñ–µ—Ä–µ –∫—É–ª—å—Ç—É—Ä—ã",
                    "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –ò–ò",
                    "total_hours": 144
                },
                {
                    "name": "–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
                    "description": "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –ø–æ ML –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                    "total_hours": 72
                },
                {
                    "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "description": "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö",
                    "total_hours": 120
                }
            ]
            
            programs = []
            for program_data in programs_data:
                program = CourseProgram(**program_data)
                session.add(program)
                programs.append(program)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            modules_data = [
                {"name": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò", "order_num": 1, "duration_hours": 15, "lecture_hours": 8, "practice_hours": 5, "independent_hours": 2},
                {"name": "–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏", "order_num": 2, "duration_hours": 44, "lecture_hours": 20, "practice_hours": 20, "independent_hours": 4},
                {"name": "–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "order_num": 3, "duration_hours": 11, "lecture_hours": 6, "practice_hours": 4, "independent_hours": 1},
                {"name": "–ò–ò –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö", "order_num": 4, "duration_hours": 11, "lecture_hours": 5, "practice_hours": 4, "independent_hours": 2},
                {"name": "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", "order_num": 5, "duration_hours": 11, "lecture_hours": 4, "practice_hours": 5, "independent_hours": 2}
            ]
            
            modules = []
            for module_data in modules_data:
                module = Module(
                    program_id=programs[0].program_id,
                    **module_data
                )
                session.add(module)
                modules.append(module)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
            lessons_data = [
                {"name": "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò", "order_num": 1, "duration_hours": 2},
                {"name": "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", "order_num": 2, "duration_hours": 3},
                {"name": "–¢–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π", "order_num": 3, "duration_hours": 2},
                {"name": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò", "order_num": 4, "duration_hours": 3}
            ]
            
            lessons = []
            for lesson_data in lessons_data:
                lesson = Lesson(
                    module_id=modules[0].module_id,
                    **lesson_data
                )
                session.add(lesson)
                lessons.append(lesson)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students_data = [
                {"phone": "+79123456789", "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "telegram_user_id": 123456789, "telegram_username": "ivan_petrov"},
                {"phone": "+79123456790", "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "telegram_user_id": 123456790, "telegram_username": "maria_sidorova"},
                {"phone": "+79123456791", "name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "telegram_user_id": 123456791, "telegram_username": "alex_kozlov"},
                {"phone": "+79123456792", "name": "–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "telegram_user_id": 123456792, "telegram_username": "elena_volkova"},
                {"phone": "+79123456793", "name": "–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤", "telegram_user_id": 123456793, "telegram_username": "dmitry_novikov"}
            ]
            
            students = []
            for i, student_data in enumerate(students_data):
                student = Student(
                    **student_data,
                    is_active=True,
                    course_program_id=programs[i % len(programs)].program_id
                )
                session.add(student)
                students.append(student)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
            streams_data = [
                {"name": "–û–∫—Ç—è–±—Ä—å 2025", "start_date": date(2025, 10, 1), "end_date": date(2025, 12, 31)},
                {"name": "–Ø–Ω–≤–∞—Ä—å 2026", "start_date": date(2026, 1, 15), "end_date": date(2026, 4, 15)},
                {"name": "–ú–∞–π 2026", "start_date": date(2026, 5, 1), "end_date": date(2026, 8, 31)}
            ]
            
            streams = []
            for i, stream_data in enumerate(streams_data):
                stream = Stream(
                    program_id=programs[i % len(programs)].program_id,
                    **stream_data
                )
                session.add(stream)
                streams.append(stream)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
            materials_data = [
                {"title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò - –õ–µ–∫—Ü–∏—è", "content": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è", "material_type": "PDF", "material_category": "LECTURE", "is_public": True},
                {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 1", "content": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "material_type": "JUPYTER", "material_category": "ASSIGNMENT", "is_public": False},
                {"title": "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "content": "–ö–∞–∫ –∏–∑—É—á–∞—Ç—å –ò–ò —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "material_type": "DOC", "material_category": "METHODICAL", "is_public": True}
            ]
            
            for i, material_data in enumerate(materials_data):
                material = CourseMaterial(
                    lesson_id=lessons[i % len(lessons)].lesson_id,
                    **material_data
                )
                session.add(material)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏
            meetings_data = [
                {"meeting_type": "LECTURE", "meeting_date": date(2025, 10, 15), "start_time": time(10, 0), "end_time": time(12, 0), "description": "–õ–µ–∫—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–∞–º –ò–ò"},
                {"meeting_type": "PRACTICE", "meeting_date": date(2025, 10, 17), "start_time": time(14, 0), "end_time": time(16, 0), "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ"},
                {"meeting_type": "INDEPENDENT", "meeting_date": date(2025, 10, 20), "description": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"}
            ]
            
            for i, meeting_data in enumerate(meetings_data):
                meeting = Meeting(
                    stream_id=streams[0].stream_id,
                    lesson_id=lessons[i % len(lessons)].lesson_id,
                    **meeting_data
                )
                session.add(meeting)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            for i in range(10):
                schedule = Schedule(
                    stream_id=streams[0].stream_id,
                    lesson_id=lessons[i % len(lessons)].lesson_id,
                    scheduled_date=date(2025, 10, 15 + i),
                    is_completed=random.choice([True, False])
                )
                session.add(schedule)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
            assignments_data = [
                {"name": "–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞", "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç", "status": "PENDING", "deadline": date(2025, 11, 1)},
                {"name": "–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "description": "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", "status": "SUBMITTED", "deadline": date(2025, 11, 15), "submitted_at": datetime(2025, 11, 10, 15, 30, 0)},
                {"name": "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ò–ò-—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã", "status": "COMPLETED", "deadline": date(2025, 12, 1), "submitted_at": datetime(2025, 11, 25, 12, 0, 0), "checked_at": datetime(2025, 11, 26, 10, 0, 0), "feedback": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!", "grade": 95}
            ]
            
            for i, assignment_data in enumerate(assignments_data):
                assignment = Assignment(
                    student_id=students[i % len(students)].student_id,
                    lesson_id=lessons[i % len(lessons)].lesson_id,
                    **assignment_data
                )
                session.add(assignment)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
            messages_data = [
                {"text_content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ", "sender_type": "user"},
                {"text_content": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", "sender_type": "user"},
                {"text_content": "–ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?", "sender_type": "user"},
                {"text_content": "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò?", "sender_type": "user"},
                {"text_content": "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –ò–ò —Å –Ω—É–ª—è?", "sender_type": "user"}
            ]
            
            bot_responses = [
                "–ü—Ä–∏–≤–µ—Ç! –ò–ò –≤ –∫—É–ª—å—Ç—É—Ä–µ - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏, –∂–∏–≤–æ–ø–∏—Å–∏, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.",
                "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä —É—á–∏—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.",
                "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ –º–æ–∑–≥–∞.",
                "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò –≤–∫–ª—é—á–∞—é—Ç: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.",
                "–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –ò–ò —Å –Ω—É–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –æ—Å–Ω–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python –∏ –∏–∑—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."
            ]
            
            for i, message_data in enumerate(messages_data):
                message = Message(
                    chat_id=123456789 + i,
                    sender_id=students[i % len(students)].student_id,
                    **message_data
                )
                session.add(message)
                await session.flush()
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                bot_response = BotResponse(
                    message_id=message.message_id,
                    text_content=bot_responses[i % len(bot_responses)]
                )
                session.add(bot_response)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
            prompts_data = [
                {"prompt_type": "QUESTION_CLASSIFIER", "prompt_text": "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –æ–±—â–∏–π, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π", "description": "–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"},
                {"prompt_type": "FAQ_RESPONSE", "prompt_text": "–û—Ç–≤–µ—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å –æ –ò–ò", "description": "–î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ FAQ"},
                {"prompt_type": "MATERIAL_RESPONSE", "prompt_text": "–û–±—ä—è—Å–Ω–∏ —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏", "description": "–î–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"}
            ]
            
            for prompt_data in prompts_data:
                prompt = Prompt(**prompt_data)
                session.add(prompt)
            
            await session.flush()
            
            # –°–æ–∑–¥–∞–µ–º FAQ –æ—Ç–≤–µ—Ç—ã
            faq_data = [
                {"category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", "answer_text": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö."},
                {"category": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ", "question": "–ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ò–ò?", "answer_text": "–ò–ò –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö."},
                {"category": "–û–±—É—á–µ–Ω–∏–µ", "question": "–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ò–ò?", "answer_text": "–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."}
            ]
            
            for faq_item in faq_data:
                faq = FAQResponse(**faq_item)
                session.add(faq)
            
            await session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
            print(f"  - –ü—Ä–æ–≥—Ä–∞–º–º –∫—É—Ä—Å–æ–≤: {len(programs)}")
            print(f"  - –ú–æ–¥—É–ª–µ–π: {len(modules)}")
            print(f"  - –£—Ä–æ–∫–æ–≤: {len(lessons)}")
            print(f"  - –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")
            print(f"  - –ü–æ—Ç–æ–∫–æ–≤: {len(streams)}")
            print(f"  - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials_data)}")
            print(f"  - –í—Å—Ç—Ä–µ—á: {len(meetings_data)}")
            print(f"  - –ó–∞–¥–∞–Ω–∏–π: {len(assignments_data)}")
            print(f"  - –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages_data)}")
            print(f"  - –ü—Ä–æ–º–ø—Ç–æ–≤: {len(prompts_data)}")
            print(f"  - FAQ: {len(faq_data)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(seed_data())